{"ast":null,"code":"import TradingVue from \"trading-vue-js\";\nimport Overlays from \"tvjs-overlays\";\nexport default {\n  name: \"app\",\n  components: {\n    TradingVue\n  },\n  methods: {\n    onResize() {\n      this.width = 1200;\n      this.height = 600;\n    },\n\n    on_button_click(event) {\n      //오버레이 조절\n      if (event.button === \"up\") {\n        this.count += 1;\n      }\n\n      if (event.button === \"down\") {\n        this.count -= 1;\n      }\n\n      const types = [\"EMA\", \"MOM\", \"BBW\", \"MFI\"];\n      const names = [\"Exponential Moving Average, 20\", \"Momentum, 10\", \"BollingerBandsWidth, 20\", \"Money Flow Index, 14\"];\n\n      if (this.count % 4 == 0) {\n        this.chart[\"offchart\"][0][\"name\"] = names[0];\n        this.chart[\"offchart\"][0][\"type\"] = types[0];\n        this.chart[\"offchart\"][0][\"data\"] = this.EMA(this.chart[\"ohlcv\"]);\n      }\n\n      if (this.count % 4 == 1) {\n        this.chart[\"offchart\"][0][\"name\"] = names[1];\n        this.chart[\"offchart\"][0][\"type\"] = types[1];\n        this.chart[\"offchart\"][0][\"data\"] = this.MOM(this.chart[\"ohlcv\"]);\n      }\n\n      if (this.count % 4 == 2) {\n        this.chart[\"offchart\"][0][\"name\"] = names[2];\n        this.chart[\"offchart\"][0][\"type\"] = types[2];\n        this.chart[\"offchart\"][0][\"data\"] = this.BBW(this.chart[\"ohlcv\"]);\n      }\n\n      if (this.count % 4 == 3) {\n        this.chart[\"offchart\"][0][\"name\"] = names[3];\n        this.chart[\"offchart\"][0][\"type\"] = types[3];\n        this.chart[\"offchart\"][0][\"data\"] = this.MFI(this.chart[\"ohlcv\"]);\n      }\n    },\n\n    SMA(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          const result = close_data.reduce(function add(sum, currValue) {\n            return sum + currValue;\n          }, 0);\n          const average = result / close_data.length;\n          data.push([ohlcv[i][0], average]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n\n      for (var k = 0; k < data.length; k++) {//console.log(data[k]);\n      }\n\n      return data;\n    },\n\n    EMA(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          const result = close_data.reduce(function add(sum, currValue) {\n            return sum + currValue;\n          }, 0);\n          const average = result / close_data.length;\n          const multiplier = 2 / 21;\n          const EMA = ohlcv[i][4] * multiplier + average * (1 - multiplier);\n          data.push([ohlcv[i][0], EMA]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n\n      for (var k = 0; k < data.length; k++) {//console.log(data[k]);\n      }\n\n      return data;\n    },\n\n    MOM(ohlcv) {\n      var data = [];\n      var before_data = [];\n      let count = 0;\n\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 10) {\n          const momentum = ohlcv[i][4] / before_data[0];\n          data.push([ohlcv[i][0], momentum * 100]);\n          before_data.shift();\n          before_data.push(ohlcv[i][4]);\n          continue;\n        }\n\n        before_data.push(ohlcv[i][4]);\n        count++;\n      }\n\n      for (var k = 0; k < data.length; k++) {//console.log(data[k]);\n      }\n\n      return data;\n    },\n\n    BBW(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          const result = close_data.reduce(function add(sum, currValue) {\n            return sum + currValue;\n          }, 0);\n          const average = result / close_data.length;\n          var devTotal = 0; // 편차\n\n          for (var j = 0; j < close_data.length; j++) {\n            var dev = close_data[j] - average;\n            devTotal += dev * dev;\n          }\n\n          var sStdDev = Math.sqrt(devTotal / (close_data.length - 1)); // 표본표준편차\n\n          const upper_limit = average + sStdDev * 2;\n          const lower_limit = average - sStdDev * 2;\n          data.push([ohlcv[i][0], (upper_limit - lower_limit) / average]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n\n      for (var k = 0; k < data.length; k++) {//console.log(data[k]);\n      }\n\n      return data;\n    },\n\n    MFI(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      var high_data = [];\n      var low_data = [];\n      let count = 0;\n\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 5) {\n          const TP = (ohlcv[i][2] + ohlcv[i][3] + ohlcv[i][4]) / 3;\n          var PMF = 0;\n          var NMF = 0;\n\n          for (var j = 0; j < close_data.length; j++) {\n            const MF = (close_data[j] + high_data[j] + low_data[j]) / 3;\n            if (TP < MF) PMF += MF;else NMF += MF;\n          }\n\n          const MFR = PMF / NMF;\n          const MFI = MFR / (1 + MFR);\n          data.push([ohlcv[i][0], MFI * 100]);\n          close_data.shift();\n          high_data.shift();\n          low_data.shift();\n          close_data.push(ohlcv[i][4]);\n          high_data.push(ohlcv[i][2]);\n          low_data.push(ohlcv[i][3]);\n          continue;\n        }\n\n        close_data.push(ohlcv[i][4]);\n        high_data.push(ohlcv[i][2]);\n        low_data.push(ohlcv[i][3]);\n        count++;\n      }\n\n      for (var k = 0; k < data.length; k++) {//console.log(data[k]);\n      }\n\n      return data;\n    },\n\n    RSI(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          var AU = 0;\n          var AD = 0;\n\n          for (var j = 0; j < close_data.length - 1; j++) {\n            const diff = close_data[j + 1] - close_data[j];\n            if (diff > 0) AU += diff;else AD += diff * -1;\n          }\n\n          const RS = AU / AD;\n          const RSI = RS / (1 + RS);\n          data.push([ohlcv[i][0], RSI * 100]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n\n      for (var k = 0; k < data.length; k++) {//console.log(data[k]);\n      }\n\n      return data;\n    }\n\n  },\n\n  created() {\n    for (var i = 0; i < this.chart[\"ohlcv\"].length; i++) {\n      let str = this.chart[\"ohlcv\"][i][0].replaceAll(\" \", \"\");\n      str += \" 00:00:00\"; //console.log(str);\n\n      this.chart[\"ohlcv\"][i][0] = Math.floor(new Date(str).getTime());\n    }\n\n    this.chart[\"onchart\"][0][\"data\"] = this.SMA(this.chart[\"ohlcv\"]);\n    this.chart[\"offchart\"][0][\"data\"] = this.MFI(this.chart[\"ohlcv\"]); // axios\n    //   .post(\"http://127.0.0.1:8000/:stock\", {\n    //     //스탁 코드를 보내고 정보를 받아오고 그래프 그리기\n    //   })\n    //   .then((res) => {\n    //     console.log(res.data);\n    //     this.ohlcv = res.data;\n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n  },\n\n  mounted() {\n    window.addEventListener(\"resize\", this.onResize);\n  },\n\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.onResize);\n  },\n\n  data() {\n    return {\n      count: 1000,\n      overlays: [Overlays[\"MOM\"], Overlays[\"SMA\"], Overlays[\"EMA\"], Overlays[\"BBW\"], Overlays[\"MFI\"], Overlays[\"RSI\"]],\n      chart: {\n        ohlcv: [[\"2022 - 11 - 15\", 4239.4, 4239.6, 4079.6, 4079.63478779, 2993.45281556], [\"2022 - 11 - 16\", 4082.2, 4082.2, 4020.2, 4033.5, 3216.95571165], [\"2022 - 11 - 17\", 4035.6, 4072.78348726, 3965, 4055.6, 2157.50135341], [\"2022 - 11 - 18\", 4055.6, 4100, 4035, 4059.1719252, 1660.6115119], [\"2022 - 11 - 19\", 4059.1, 4076.6, 4014.1, 4060, 1070.09946267], [\"2022 - 11 - 20\", 4060.5, 4060.5, 3987.2, 4049.2, 1530.46774287], [\"2022 - 11 - 21\", 4049.2, 4092.7, 4035, 4089.6691106, 922.84509291], [\"2022 - 11 - 22\", 4089.9, 4098.6, 4060, 4073.2, 793.81081878], [\"2022 - 11 - 23\", 4073.7, 4084.3, 4045.3, 4049.7, 382.60686566], [\"2022 - 11 - 24\", 4049.9, 4074.5, 4041, 4042.1554296, 587.91082169], [\"2022 - 11 - 25\", 4042.1, 4058.2, 4025, 4031.3, 399.88361961], [\"2022 - 11 - 26\", 4031.3, 4054.8, 3953.5, 4005, 1462.60523159], [\"2022 - 11 - 27\", 4005, 4026.5, 3953.6, 4022.7, 818.53015592], [\"2022 - 11 - 28\", 4022.8, 4065, 4018.9, 4039.5, 971.06384284], [\"2022 - 11 - 29\", 4038.5, 4065, 4010.1, 4052, 726.79477438], [\"2022 - 11 - 30\", 4052.1, 4070.8, 4040.1, 4045, 495.99207452], [\"2022 - 12 - 1\", 4045, 4045.9, 4014.5, 4014.6, 487.14701364], [\"2022 - 12 - 2\", 4014.6, 4041.7, 4005.6, 4031.8, 505.30648465], [\"2022 - 12 - 3\", 4032, 4032, 3986.1, 4008.8, 792.52103654], [\"2022 - 12 - 4\", 4008.8, 4017.1, 3975.8, 4003.7, 489.94574863], [\"2022 - 12 - 5\", 4003.7, 4017.2, 3964.5, 3991.7, 1004.91928605], [\"2022 - 12 - 6\", 3992.6, 4010, 3980.1, 4009.3, 297.78849893], [\"2022 - 12 - 7\", 4009.3, 4061.9, 4007.4, 4025.2, 498.21371364], [\"2022 - 12 - 8\", 4025, 4056.9, 4023.6, 4047, 373.52977661], [\"2022 - 12 - 9\", 4046.9, 4208, 4038.6, 4191.9, 2589.49296961], [\"2022 - 12 - 10\", 4192, 4233.5, 4182.2, 4200, 1875.67597075], [\"2022 - 12 - 11\", 4200, 4268.3, 4199.9, 4216.6, 1197.42649634], [\"2022 - 12 - 12\", 4216.7, 4260.7, 4208.5, 4216.1, 1067.10928935], [\"2022 - 12 - 13\", 4214.9, 4257.6, 4205, 4247.3, 970.81717333], [\"2022 - 12 - 14\", 4247.3, 4264.4, 4230, 4263.9, 869.00302097], [\"2022 - 12 - 15\", 4263, 4340, 4263, 4313.4, 1458.724505]],\n        onchart: [{\n          name: \"Simple Moving Average, 20\",\n          type: \"SMA\",\n          data: [],\n          settings: {\n            \"z-index\": 5,\n            legend: false,\n            color: \"#f7890c\"\n          }\n        }],\n        offchart: [//   {\n        //     name: \"Relative Strength Index, 20\",\n        //     type: \"RSI\",\n        //     data: [],\n        //     settings: {\n        //       color: \"#f7890c\",\n        //     },\n        //   },\n        {\n          name: \"Money Flow Index, 14\",\n          type: \"MFI\",\n          data: [],\n          settings: {\n            color: \"#2cc6c9ab\",\n            backColor: \"#2cc6c90a\"\n          }\n        }]\n      },\n      width: window.innerWidth,\n      height: window.innerHeight,\n      colors: {\n        colorBack: \"#fff\",\n        colorGrid: \"#eee\",\n        colorText: \"#333\"\n      }\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAkBA;AACA;AAEA;EACAA,WADA;EAEAC;IAAAC;EAAA,CAFA;EAGAC;IACAC;MACA;MACA;IACA,CAJA;;IAKAC;MACA;MACA;QACA;MACA;;MACA;QACA;MACA;;MACA;MACA,eACA,gCADA,EAEA,cAFA,EAGA,yBAHA,EAIA,sBAJA;;MAMA;QACA;QACA;QACA;MACA;;MACA;QACA;QACA;QACA;MACA;;MACA;QACA;QACA;QACA;MACA;;MACA;QACA;QACA;QACA;MACA;IACA,CAxCA;;IAyCAC;MACA;MACA;MACA;MACA;;MACA;QACA;UACA;YACA;UACA,CAFA,EAEA,CAFA;UAGA;UACAC;UACAC;UACAA;UACA;QACA;;QACAA;QACAC;MACA;;MACA,uCACA;MACA;;MACA;IACA,CAhEA;;IAiEAC;MACA;MACA;MACA;MACA;;MACA;QACA;UACA;YACA;UACA,CAFA,EAEA,CAFA;UAGA;UACA;UACA;UACAH;UACAC;UACAA;UACA;QACA;;QACAA;QACAC;MACA;;MACA,uCACA;MACA;;MACA;IACA,CA1FA;;IA2FAE;MACA;MACA;MACA;;MACA;QACA;UACA;UACAJ;UACAK;UACAA;UACA;QACA;;QACAA;QACAH;MACA;;MACA,uCACA;MACA;;MACA;IACA,CA9GA;;IA+GAI;MACA;MACA;MACA;MACA;;MACA;QACA;UACA;YACA;UACA,CAFA,EAEA,CAFA;UAGA;UAEA,iBANA,CAMA;;UACA;YACA;YACAC;UACA;;UAEA,4DAZA,CAYA;;UACA;UACA;UACAP;UACAC;UACAA;UACA;QACA;;QACAA;QACAC;MACA;;MACA,uCACA;MACA;;MACA;IACA,CAhJA;;IAiJAM;MACA;MACA;MACA;MACA;MACA;MACA;;MACA;QACA;UACA;UACA;UACA;;UACA;YACA;YACA,4BACAC;UACA;;UACA;UACA;UACAT;UACAC;UACAS;UACAC;UACAV;UACAS;UACAC;UACA;QACA;;QACAV;QACAS;QACAC;QACAT;MACA;;MACA,uCACA;MACA;;MACA;IACA,CAtLA;;IAuLAU;MACA;MACA;MACA;MACA;;MACA;QACA;UACA;UACA;;UACA;YACA;YACA,8BACAC;UACA;;UACA;UACA;UACAb;UACAC;UACAA;UACA;QACA;;QACAA;QACAC;MACA;;MACA,uCACA;MACA;;MACA;IACA;;EAnNA,CAHA;;EAwNAY;IACA;MACA;MACAC,mBAFA,CAGA;;MACA;IACA;;IACA;IACA,kEARA,CASA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA,CA5OA;;EA6OAC;IACAC;EACA,CA/OA;;EAgPAC;IACAD;EACA,CAlPA;;EAmPAjB;IACA;MACAE,WADA;MAEAiB,WACAC,eADA,EAEAA,eAFA,EAGAA,eAHA,EAIAA,eAJA,EAKAA,eALA,EAMAA,eANA,CAFA;MAUAC;QACAC,QACA,CACA,gBADA,EAEA,MAFA,EAGA,MAHA,EAIA,MAJA,EAKA,aALA,EAMA,aANA,CADA,EASA,iEATA,EAUA,CACA,gBADA,EAEA,MAFA,EAGA,aAHA,EAIA,IAJA,EAKA,MALA,EAMA,aANA,CAVA,EAkBA,kEAlBA,EAmBA,+DAnBA,EAoBA,iEApBA,EAqBA,oEArBA,EAsBA,8DAtBA,EAuBA,gEAvBA,EAwBA,oEAxBA,EAyBA,8DAzBA,EA0BA,+DA1BA,EA2BA,8DA3BA,EA4BA,8DA5BA,EA6BA,4DA7BA,EA8BA,8DA9BA,EA+BA,6DA/BA,EAgCA,+DAhCA,EAiCA,2DAjCA,EAkCA,+DAlCA,EAmCA,gEAnCA,EAoCA,6DApCA,EAqCA,+DArCA,EAsCA,2DAtCA,EAuCA,8DAvCA,EAwCA,6DAxCA,EAyCA,+DAzCA,EA0CA,iEA1CA,EA2CA,8DA3CA,EA4CA,8DA5CA,EA6CA,yDA7CA,CADA;QAgDAC,UACA;UACA9B,iCADA;UAEA+B,WAFA;UAGAxB,QAHA;UAIAyB;YACA,YADA;YAEAC,aAFA;YAGAC;UAHA;QAJA,CADA,CAhDA;QA4DAC,WACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;UACAnC,4BADA;UAEA+B,WAFA;UAGAxB,QAHA;UAIAyB;YACAE,kBADA;YAEAE;UAFA;QAJA,CATA;MA5DA,CAVA;MA0FAC,wBA1FA;MA2FAC,0BA3FA;MA4FAC;QACAC,iBADA;QAEAC,iBAFA;QAGAC;MAHA;IA5FA;EAkGA;;AAtVA","names":["name","components","TradingVue","methods","onResize","on_button_click","SMA","data","close_data","count","EMA","MOM","before_data","BBW","devTotal","MFI","NMF","high_data","low_data","RSI","AD","created","str","mounted","window","beforeDestroy","overlays","Overlays","chart","ohlcv","onchart","type","settings","legend","color","offchart","backColor","width","height","colors","colorBack","colorGrid","colorText"],"sourceRoot":"src/components","sources":["TradingVue.vue"],"sourcesContent":["<template>\n  <!-- TradingVueJs 101 (example from 'Getting Started' ) -->\n\n  <trading-vue\n    :data=\"this.chart\"\n    :width=\"this.width\"\n    :height=\"this.height\"\n    :color-back=\"colors.colorBack\"\n    :color-grid=\"colors.colorGrid\"\n    :color-text=\"colors.colorText\"\n    :legend-buttons=\"['up', 'down']\"\n    v-on:legend-button-click=\"on_button_click\"\n    :overlays=\"overlays\"\n  >\n  </trading-vue>\n</template>\n\n<script>\nimport TradingVue from \"trading-vue-js\";\nimport Overlays from \"tvjs-overlays\";\n\nexport default {\n  name: \"app\",\n  components: { TradingVue },\n  methods: {\n    onResize() {\n      this.width = 1200;\n      this.height =600;\n    },\n    on_button_click(event) {\n      //오버레이 조절\n      if (event.button === \"up\") {\n        this.count += 1;\n      }\n      if (event.button === \"down\") {\n        this.count -= 1;\n      }\n      const types = [\"EMA\", \"MOM\", \"BBW\", \"MFI\"];\n      const names = [\n        \"Exponential Moving Average, 20\",\n        \"Momentum, 10\",\n        \"BollingerBandsWidth, 20\",\n        \"Money Flow Index, 14\",\n      ];\n      if (this.count % 4 == 0) {\n        this.chart[\"offchart\"][0][\"name\"] = names[0];\n        this.chart[\"offchart\"][0][\"type\"] = types[0];\n        this.chart[\"offchart\"][0][\"data\"] = this.EMA(this.chart[\"ohlcv\"]);\n      }\n      if (this.count % 4 == 1) {\n        this.chart[\"offchart\"][0][\"name\"] = names[1];\n        this.chart[\"offchart\"][0][\"type\"] = types[1];\n        this.chart[\"offchart\"][0][\"data\"] = this.MOM(this.chart[\"ohlcv\"]);\n      }\n      if (this.count % 4 == 2) {\n        this.chart[\"offchart\"][0][\"name\"] = names[2];\n        this.chart[\"offchart\"][0][\"type\"] = types[2];\n        this.chart[\"offchart\"][0][\"data\"] = this.BBW(this.chart[\"ohlcv\"]);\n      }\n      if (this.count % 4 == 3) {\n        this.chart[\"offchart\"][0][\"name\"] = names[3];\n        this.chart[\"offchart\"][0][\"type\"] = types[3];\n        this.chart[\"offchart\"][0][\"data\"] = this.MFI(this.chart[\"ohlcv\"]);\n      }\n    },\n    SMA(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          const result = close_data.reduce(function add(sum, currValue) {\n            return sum + currValue;\n          }, 0);\n          const average = result / close_data.length;\n          data.push([ohlcv[i][0], average]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n      for (var k = 0; k < data.length; k++) {\n        //console.log(data[k]);\n      }\n      return data;\n    },\n    EMA(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          const result = close_data.reduce(function add(sum, currValue) {\n            return sum + currValue;\n          }, 0);\n          const average = result / close_data.length;\n          const multiplier = 2 / 21;\n          const EMA = ohlcv[i][4] * multiplier + average * (1 - multiplier);\n          data.push([ohlcv[i][0], EMA]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n      for (var k = 0; k < data.length; k++) {\n        //console.log(data[k]);\n      }\n      return data;\n    },\n    MOM(ohlcv) {\n      var data = [];\n      var before_data = [];\n      let count = 0;\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 10) {\n          const momentum = ohlcv[i][4] / before_data[0];\n          data.push([ohlcv[i][0], momentum * 100]);\n          before_data.shift();\n          before_data.push(ohlcv[i][4]);\n          continue;\n        }\n        before_data.push(ohlcv[i][4]);\n        count++;\n      }\n      for (var k = 0; k < data.length; k++) {\n        //console.log(data[k]);\n      }\n      return data;\n    },\n    BBW(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          const result = close_data.reduce(function add(sum, currValue) {\n            return sum + currValue;\n          }, 0);\n          const average = result / close_data.length;\n\n          var devTotal = 0; // 편차\n          for (var j = 0; j < close_data.length; j++) {\n            var dev = close_data[j] - average;\n            devTotal += dev * dev;\n          }\n\n          var sStdDev = Math.sqrt(devTotal / (close_data.length - 1)); // 표본표준편차\n          const upper_limit = average + sStdDev * 2;\n          const lower_limit = average - sStdDev * 2;\n          data.push([ohlcv[i][0], (upper_limit - lower_limit) / average]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n      for (var k = 0; k < data.length; k++) {\n        //console.log(data[k]);\n      }\n      return data;\n    },\n    MFI(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      var high_data = [];\n      var low_data = [];\n      let count = 0;\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 5) {\n          const TP = (ohlcv[i][2] + ohlcv[i][3] + ohlcv[i][4]) / 3;\n          var PMF = 0;\n          var NMF = 0;\n          for (var j = 0; j < close_data.length; j++) {\n            const MF = (close_data[j] + high_data[j] + low_data[j]) / 3;\n            if (TP < MF) PMF += MF;\n            else NMF += MF;\n          }\n          const MFR = PMF / NMF;\n          const MFI = MFR / (1 + MFR);\n          data.push([ohlcv[i][0], MFI * 100]);\n          close_data.shift();\n          high_data.shift();\n          low_data.shift();\n          close_data.push(ohlcv[i][4]);\n          high_data.push(ohlcv[i][2]);\n          low_data.push(ohlcv[i][3]);\n          continue;\n        }\n        close_data.push(ohlcv[i][4]);\n        high_data.push(ohlcv[i][2]);\n        low_data.push(ohlcv[i][3]);\n        count++;\n      }\n      for (var k = 0; k < data.length; k++) {\n        //console.log(data[k]);\n      }\n      return data;\n    },\n    RSI(ohlcv) {\n      //console.log(ohlcv);\n      var data = [];\n      var close_data = [];\n      let count = 0;\n      for (var i = 0; i < ohlcv.length; i++) {\n        if (count == 20) {\n          var AU = 0;\n          var AD = 0;\n          for (var j = 0; j < close_data.length - 1; j++) {\n            const diff = close_data[j + 1] - close_data[j];\n            if (diff > 0) AU += diff;\n            else AD += diff * -1;\n          }\n          const RS = AU / AD;\n          const RSI = RS / (1 + RS);\n          data.push([ohlcv[i][0], RSI * 100]);\n          close_data.shift();\n          close_data.push(ohlcv[i][4]);\n          continue;\n        }\n        close_data.push(ohlcv[i][4]);\n        count++;\n      }\n      for (var k = 0; k < data.length; k++) {\n        //console.log(data[k]);\n      }\n      return data;\n    },\n  },\n  created() {\n    for (var i = 0; i < this.chart[\"ohlcv\"].length; i++) {\n      let str = this.chart[\"ohlcv\"][i][0].replaceAll(\" \", \"\");\n      str += \" 00:00:00\";\n      //console.log(str);\n      this.chart[\"ohlcv\"][i][0] = Math.floor(new Date(str).getTime());\n    }\n    this.chart[\"onchart\"][0][\"data\"] = this.SMA(this.chart[\"ohlcv\"]);\n    this.chart[\"offchart\"][0][\"data\"] = this.MFI(this.chart[\"ohlcv\"]);\n    // axios\n    //   .post(\"http://127.0.0.1:8000/:stock\", {\n    //     //스탁 코드를 보내고 정보를 받아오고 그래프 그리기\n    //   })\n    //   .then((res) => {\n    //     console.log(res.data);\n    //     this.ohlcv = res.data;\n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n  },\n  mounted() {\n    window.addEventListener(\"resize\", this.onResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.onResize);\n  },\n  data() {\n    return {\n      count: 1000,\n      overlays: [\n        Overlays[\"MOM\"],\n        Overlays[\"SMA\"],\n        Overlays[\"EMA\"],\n        Overlays[\"BBW\"],\n        Overlays[\"MFI\"],\n        Overlays[\"RSI\"],\n      ],\n      chart: {\n        ohlcv: [\n          [\n            \"2022 - 11 - 15\",\n            4239.4,\n            4239.6,\n            4079.6,\n            4079.63478779,\n            2993.45281556,\n          ],\n          [\"2022 - 11 - 16\", 4082.2, 4082.2, 4020.2, 4033.5, 3216.95571165],\n          [\n            \"2022 - 11 - 17\",\n            4035.6,\n            4072.78348726,\n            3965,\n            4055.6,\n            2157.50135341,\n          ],\n          [\"2022 - 11 - 18\", 4055.6, 4100, 4035, 4059.1719252, 1660.6115119],\n          [\"2022 - 11 - 19\", 4059.1, 4076.6, 4014.1, 4060, 1070.09946267],\n          [\"2022 - 11 - 20\", 4060.5, 4060.5, 3987.2, 4049.2, 1530.46774287],\n          [\"2022 - 11 - 21\", 4049.2, 4092.7, 4035, 4089.6691106, 922.84509291],\n          [\"2022 - 11 - 22\", 4089.9, 4098.6, 4060, 4073.2, 793.81081878],\n          [\"2022 - 11 - 23\", 4073.7, 4084.3, 4045.3, 4049.7, 382.60686566],\n          [\"2022 - 11 - 24\", 4049.9, 4074.5, 4041, 4042.1554296, 587.91082169],\n          [\"2022 - 11 - 25\", 4042.1, 4058.2, 4025, 4031.3, 399.88361961],\n          [\"2022 - 11 - 26\", 4031.3, 4054.8, 3953.5, 4005, 1462.60523159],\n          [\"2022 - 11 - 27\", 4005, 4026.5, 3953.6, 4022.7, 818.53015592],\n          [\"2022 - 11 - 28\", 4022.8, 4065, 4018.9, 4039.5, 971.06384284],\n          [\"2022 - 11 - 29\", 4038.5, 4065, 4010.1, 4052, 726.79477438],\n          [\"2022 - 11 - 30\", 4052.1, 4070.8, 4040.1, 4045, 495.99207452],\n          [\"2022 - 12 - 1\", 4045, 4045.9, 4014.5, 4014.6, 487.14701364],\n          [\"2022 - 12 - 2\", 4014.6, 4041.7, 4005.6, 4031.8, 505.30648465],\n          [\"2022 - 12 - 3\", 4032, 4032, 3986.1, 4008.8, 792.52103654],\n          [\"2022 - 12 - 4\", 4008.8, 4017.1, 3975.8, 4003.7, 489.94574863],\n          [\"2022 - 12 - 5\", 4003.7, 4017.2, 3964.5, 3991.7, 1004.91928605],\n          [\"2022 - 12 - 6\", 3992.6, 4010, 3980.1, 4009.3, 297.78849893],\n          [\"2022 - 12 - 7\", 4009.3, 4061.9, 4007.4, 4025.2, 498.21371364],\n          [\"2022 - 12 - 8\", 4025, 4056.9, 4023.6, 4047, 373.52977661],\n          [\"2022 - 12 - 9\", 4046.9, 4208, 4038.6, 4191.9, 2589.49296961],\n          [\"2022 - 12 - 10\", 4192, 4233.5, 4182.2, 4200, 1875.67597075],\n          [\"2022 - 12 - 11\", 4200, 4268.3, 4199.9, 4216.6, 1197.42649634],\n          [\"2022 - 12 - 12\", 4216.7, 4260.7, 4208.5, 4216.1, 1067.10928935],\n          [\"2022 - 12 - 13\", 4214.9, 4257.6, 4205, 4247.3, 970.81717333],\n          [\"2022 - 12 - 14\", 4247.3, 4264.4, 4230, 4263.9, 869.00302097],\n          [\"2022 - 12 - 15\", 4263, 4340, 4263, 4313.4, 1458.724505],\n        ],\n        onchart: [\n          {\n            name: \"Simple Moving Average, 20\",\n            type: \"SMA\",\n            data: [],\n            settings: {\n              \"z-index\": 5,\n              legend: false,\n              color: \"#f7890c\",\n            },\n          },\n        ],\n        offchart: [\n          //   {\n          //     name: \"Relative Strength Index, 20\",\n          //     type: \"RSI\",\n          //     data: [],\n          //     settings: {\n          //       color: \"#f7890c\",\n          //     },\n          //   },\n          {\n            name: \"Money Flow Index, 14\",\n            type: \"MFI\",\n            data: [],\n            settings: {\n              color: \"#2cc6c9ab\",\n              backColor: \"#2cc6c90a\",\n            },\n          },\n        ],\n      },\n      width: window.innerWidth,\n      height: window.innerHeight,\n      colors: {\n        colorBack: \"#fff\",\n        colorGrid: \"#eee\",\n        colorText: \"#333\",\n      },\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}