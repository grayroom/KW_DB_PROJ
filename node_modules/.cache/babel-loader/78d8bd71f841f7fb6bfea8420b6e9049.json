{"ast":null,"code":"import Document from '@tiptap/extension-document';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport Text from '@tiptap/extension-text';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport { Editor, EditorContent } from '@tiptap/vue-2';\nimport HardBreak from '@tiptap/extension-hard-break';\nimport HorizontalRule from '@tiptap/extension-horizontal-rule';\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\nimport { radioSelect as RadioSelect, dropdownSelect as DropdownSelect, editable as Editable } from './Extension.js';\nexport default {\n  components: {\n    EditorContent\n  },\n\n  data() {\n    return {\n      editor: null,\n      title: ''\n    };\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      extensions: [Document, Paragraph, Text, RadioSelect, DropdownSelect, Editable, Placeholder.configure({\n        placeholder: '양식을 작성해주세요'\n      }), HardBreak, HorizontalRule]\n    });\n  },\n\n  methods: {\n    insertRadio() {\n      this.editor.commands.insertContent('<radio-select count = \"0\" na = ' + uuidv4() + // random and for unique name(radio button group)\n      '></radio-select><editable><p>항목명을 명시하세요</p></editable>');\n      this.editor.chain().focus().setHorizontalRule().run(); // this.editor.commands.setHardBreak()\n    },\n\n    insertDropdown() {\n      this.editor.commands.insertContent('<dropdown-select></dropdown-select><editable><p>항목명을 명시하세요</p></editable>');\n      this.editor.chain().focus().setHorizontalRule().run(); // this.editor.commands.setHardBreak()\n    },\n\n    insertHr() {\n      this.editor.chain().focus().setHorizontalRule().run();\n    },\n\n    // put editor data with axios\n    putData() {\n      let data = {\n        \"content\": this.editor.getJSON(),\n        \"title\": this.title\n      };\n      var accessToken = Cookies.get('access');\n      axios.post('/emr/api/templates/', JSON.stringify(data), {\n        withCredentials: true,\n        crossDomain: true,\n        credentials: \"access\",\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: accessToken\n        }\n      }).then(response => {\n        console.log(response); //FIXME: reload 하지 않고 특정 컴포넌트만 reload 할수있는 방법이 있을것 같아\n\n        location.reload(true);\n      }).catch(error => {\n        console.log(error);\n        location.reload(true);\n      });\n      this.toggleModal();\n    },\n\n    toggleModal() {\n      this.$refs.defaultModal.toggleAttribute('aria-hidden');\n      this.$refs.defaultModal.classList.toggle('hidden');\n      this.title = '';\n    }\n\n  },\n\n  beforeUnmount() {\n    this.editor.destroy();\n  }\n\n};","map":{"version":3,"mappings":"AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEAA;AACAA;AAGA,SACAC,0BADA,EAEAC,gCAFA,EAGAC,oBAHA,QAIA,gBAJA;AAMA;EACAC;IACAC;EADA,CADA;;EAKAC;IACA;MACAC,YADA;MAEAC;IAFA;EAIA,CAVA;;EAYAC;IACA;MACAC,aACAC,QADA,EAEAC,SAFA,EAGAC,IAHA,EAIAC,WAJA,EAKAC,cALA,EAMAC,QANA,EAOAC;QACAC;MADA,EAPA,EAUAC,SAVA,EAWAC,cAXA;IADA;EAeA,CA5BA;;EA8BAC;IACAC;MACA,mCACA,oCACAC,QADA,GACA;MACA,wDAHA;MAIA,sDALA,CAMA;IACA,CARA;;IASAC;MACA,mCACA,2EADA;MAEA,sDAHA,CAIA;IACA,CAdA;;IAeAC;MACA;IACA,CAjBA;;IAmBA;IACAC;MACA;QACA,gCADA;QAEA;MAFA;MAKA;MAEA1B,kCACA2B,oBADA,EAEA;QACAC,qBADA;QAEAC,iBAFA;QAGAC,qBAHA;QAIAC;UACA,kCADA;UAEAC;QAFA;MAJA,CAFA,EAWAC,IAXA,CAWAC;QACAC,sBADA,CAEA;;QACAC;MACA,CAfA,EAgBAC,KAhBA,CAgBAC;QACAH;QACAC;MACA,CAnBA;MAqBA;IACA,CAlDA;;IAoDAG;MACA;MACA;MAEA;IACA;;EAzDA,CA9BA;;EA0FAC;IACA;EACA;;AA5FA","names":["axios","radioSelect","dropdownSelect","editable","components","EditorContent","data","editor","title","mounted","extensions","Document","Paragraph","Text","RadioSelect","DropdownSelect","Editable","Placeholder","placeholder","HardBreak","HorizontalRule","methods","insertRadio","uuidv4","insertDropdown","insertHr","putData","JSON","withCredentials","crossDomain","credentials","headers","Authorization","then","response","console","location","catch","error","toggleModal","beforeUnmount"],"sourceRoot":"src/components","sources":["EmrPrescription.vue"],"sourcesContent":["<template>\n  <div>\n    \n  </div>\n</template>\n\n<script>\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport Placeholder from '@tiptap/extension-placeholder'\nimport { Editor, EditorContent } from '@tiptap/vue-2'\nimport HardBreak from '@tiptap/extension-hard-break'\nimport HorizontalRule from '@tiptap/extension-horizontal-rule'\n\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport Cookies from 'js-cookie'\n\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\n\nimport {\n  radioSelect as RadioSelect,\n  dropdownSelect as DropdownSelect,\n  editable as Editable\n} from './Extension.js'\n\nexport default {\n  components: {\n    EditorContent,\n  },\n\n  data() {\n    return {\n      editor: null,\n      title: ''\n    }\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      extensions: [\n        Document,\n        Paragraph,\n        Text,\n        RadioSelect,\n        DropdownSelect,\n        Editable,\n        Placeholder.configure({\n          placeholder: '양식을 작성해주세요',\n        }),\n        HardBreak,\n        HorizontalRule,\n      ]\n    })\n  },\n\n  methods: {\n    insertRadio() {\n      this.editor.commands.insertContent(\n        '<radio-select count = \"0\" na = ' +\n        uuidv4() + // random and for unique name(radio button group)\n        '></radio-select><editable><p>항목명을 명시하세요</p></editable>')\n      this.editor.chain().focus().setHorizontalRule().run()\n      // this.editor.commands.setHardBreak()\n    },\n    insertDropdown() {\n      this.editor.commands.insertContent(\n        '<dropdown-select></dropdown-select><editable><p>항목명을 명시하세요</p></editable>')\n      this.editor.chain().focus().setHorizontalRule().run()\n      // this.editor.commands.setHardBreak()\n    },\n    insertHr() {\n      this.editor.chain().focus().setHorizontalRule().run()\n    },\n\n    // put editor data with axios\n    putData() {\n      let data = {\n        \"content\": this.editor.getJSON(),\n        \"title\": this.title\n      }\n\n      var accessToken = Cookies.get('access')\n\n      axios.post('/emr/api/templates/',\n        JSON.stringify(data),\n        {\n          withCredentials: true,\n          crossDomain: true,\n          credentials: \"access\",\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: accessToken\n          }\n        })\n        .then(response => {\n          console.log(response)\n          //FIXME: reload 하지 않고 특정 컴포넌트만 reload 할수있는 방법이 있을것 같아\n          location.reload(true)\n        })\n        .catch(error => {\n          console.log(error)\n          location.reload(true)\n        })\n\n      this.toggleModal()\n    },\n\n    toggleModal() {\n      this.$refs.defaultModal.toggleAttribute('aria-hidden')\n      this.$refs.defaultModal.classList.toggle('hidden')\n      \n      this.title = ''\n    }\n  },\n\n  beforeUnmount() {\n    this.editor.destroy()\n  },\n}\n</script>\n\n<style lang=\"scss\">\nbutton {\n  line-break: nowrap;\n}\n\n/* Basic editor styles */\n.ProseMirror {\n  padding: 1rem;\n  border: 1px solid rgb(209 213 219);\n  border-radius: 0.5rem;\n  height: 100%;\n\n  >hr {\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  .ProseMirror {\n    border-color: rgb(107 114 128);\n  }\n}\n\n/* Basic editor styles */\n\n/* Placeholder (at the top) */\n.ProseMirror p.is-editor-empty:first-child::before {\n  content: attr(data-placeholder);\n  float: left;\n  color: #6B7280;\n  pointer-events: none;\n  height: 0;\n}\n\nhr.ProseMirror-selectednode {\n  border-top: 1px solid #68CEF8;\n}\n\n#defaultModal {\n  background: rgba($color: #000000, $alpha: 0.5);\n}\n</style>"]},"metadata":{},"sourceType":"module"}