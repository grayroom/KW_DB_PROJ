{"ast":null,"code":"import { Extension } from '@tiptap/core';\nimport { Plugin } from 'prosemirror-state';\nimport { Decoration, DecorationSet } from 'prosemirror-view';\nconst Placeholder = Extension.create({\n  name: 'placeholder',\n\n  addOptions() {\n    return {\n      emptyEditorClass: 'is-editor-empty',\n      emptyNodeClass: 'is-empty',\n      placeholder: 'Write something …',\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      props: {\n        decorations: ({\n          doc,\n          selection\n        }) => {\n          const active = this.editor.isEditable || !this.options.showOnlyWhenEditable;\n          const {\n            anchor\n          } = selection;\n          const decorations = [];\n\n          if (!active) {\n            return null;\n          }\n\n          doc.descendants((node, pos) => {\n            const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\n            const isEmpty = !node.isLeaf && !node.childCount;\n\n            if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n              const classes = [this.options.emptyNodeClass];\n\n              if (this.editor.isEmpty) {\n                classes.push(this.options.emptyEditorClass);\n              }\n\n              const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                class: classes.join(' '),\n                'data-placeholder': typeof this.options.placeholder === 'function' ? this.options.placeholder({\n                  editor: this.editor,\n                  node,\n                  pos,\n                  hasAnchor\n                }) : this.options.placeholder\n              });\n              decorations.push(decoration);\n            }\n\n            return this.options.includeChildren;\n          });\n          return DecorationSet.create(doc, decorations);\n        }\n      }\n    })];\n  }\n\n});\nexport { Placeholder, Placeholder as default };","map":{"version":3,"mappings":";;;AAmBa,iBAAW,GAAGA,SAAS,CAACC,MAAV,CAAqC;EAC9DC,IAAI,EAAE,aADwD;;EAG9DC,UAAU;IACR,OAAO;MACLC,gBAAgB,EAAE,iBADb;MAELC,cAAc,EAAE,UAFX;MAGLC,WAAW,EAAE,mBAHR;MAILC,oBAAoB,EAAE,IAJjB;MAKLC,eAAe,EAAE,IALZ;MAMLC,eAAe,EAAE;IANZ,CAAP;EAQD,CAZ6D;;EAc9DC,qBAAqB;IACnB,OAAO,CACL,IAAIC,MAAJ,CAAW;MACTC,KAAK,EAAE;QACLC,WAAW,EAAE,CAAC;UAAEC,GAAF;UAAOC;QAAP,CAAD,KAAuB;UAClC,MAAMC,MAAM,GAAG,KAAKC,MAAL,CAAYC,UAAZ,IAA0B,CAAC,KAAKC,OAAL,CAAaZ,oBAAvD;UACA,MAAM;YAAEa;UAAF,IAAaL,SAAnB;UACA,MAAMF,WAAW,GAAiB,EAAlC;;UAEA,IAAI,CAACG,MAAL,EAAa;YACX,OAAO,IAAP;UACD;;UAEDF,GAAG,CAACO,WAAJ,CAAgB,CAACC,IAAD,EAAOC,GAAP,KAAc;YAC5B,MAAMC,SAAS,GAAGJ,MAAM,IAAIG,GAAV,IAAiBH,MAAM,IAAKG,GAAG,GAAGD,IAAI,CAACG,QAAzD;YACA,MAAMC,OAAO,GAAG,CAACJ,IAAI,CAACK,MAAN,IAAgB,CAACL,IAAI,CAACM,UAAtC;;YAEA,IAAI,CAACJ,SAAS,IAAI,CAAC,KAAKL,OAAL,CAAaX,eAA5B,KAAgDkB,OAApD,EAA6D;cAC3D,MAAMG,OAAO,GAAG,CAAC,KAAKV,OAAL,CAAad,cAAd,CAAhB;;cAEA,IAAI,KAAKY,MAAL,CAAYS,OAAhB,EAAyB;gBACvBG,OAAO,CAACC,IAAR,CAAa,KAAKX,OAAL,CAAaf,gBAA1B;cACD;;cAED,MAAM2B,UAAU,GAAGC,UAAU,CAACV,IAAX,CAAgBC,GAAhB,EAAqBA,GAAG,GAAGD,IAAI,CAACG,QAAhC,EAA0C;gBAC3DQ,KAAK,EAAEJ,OAAO,CAACK,IAAR,CAAa,GAAb,CADoD;gBAE3D,oBAAoB,OAAO,KAAKf,OAAL,CAAab,WAApB,KAAoC,UAApC,GAChB,KAAKa,OAAL,CAAab,WAAb,CAAyB;kBACzBW,MAAM,EAAE,KAAKA,MADY;kBAEzBK,IAFyB;kBAGzBC,GAHyB;kBAIzBC;gBAJyB,CAAzB,CADgB,GAOhB,KAAKL,OAAL,CAAab;cAT0C,CAA1C,CAAnB;cAYAO,WAAW,CAACiB,IAAZ,CAAiBC,UAAjB;YACD;;YAED,OAAO,KAAKZ,OAAL,CAAaV,eAApB;UACD,CA3BD;UA6BA,OAAO0B,aAAa,CAAClC,MAAd,CAAqBa,GAArB,EAA0BD,WAA1B,CAAP;QACD;MAxCI;IADE,CAAX,CADK,CAAP;EA8CD;;AA7D6D,CAArC,CAAd","names":["Extension","create","name","addOptions","emptyEditorClass","emptyNodeClass","placeholder","showOnlyWhenEditable","showOnlyCurrent","includeChildren","addProseMirrorPlugins","Plugin","props","decorations","doc","selection","active","editor","isEditable","options","anchor","descendants","node","pos","hasAnchor","nodeSize","isEmpty","isLeaf","childCount","classes","push","decoration","Decoration","class","join","DecorationSet"],"sources":["../src/placeholder.ts"],"sourcesContent":["import { Editor, Extension } from '@tiptap/core'\nimport { Node as ProsemirrorNode } from 'prosemirror-model'\nimport { Plugin } from 'prosemirror-state'\nimport { Decoration, DecorationSet } from 'prosemirror-view'\n\nexport interface PlaceholderOptions {\n  emptyEditorClass: string,\n  emptyNodeClass: string,\n  placeholder: ((PlaceholderProps: {\n    editor: Editor,\n    node: ProsemirrorNode,\n    pos: number,\n    hasAnchor: boolean,\n  }) => string) | string,\n  showOnlyWhenEditable: boolean,\n  showOnlyCurrent: boolean,\n  includeChildren: boolean,\n}\n\nexport const Placeholder = Extension.create<PlaceholderOptions>({\n  name: 'placeholder',\n\n  addOptions() {\n    return {\n      emptyEditorClass: 'is-editor-empty',\n      emptyNodeClass: 'is-empty',\n      placeholder: 'Write something …',\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        props: {\n          decorations: ({ doc, selection }) => {\n            const active = this.editor.isEditable || !this.options.showOnlyWhenEditable\n            const { anchor } = selection\n            const decorations: Decoration[] = []\n\n            if (!active) {\n              return null\n            }\n\n            doc.descendants((node, pos) => {\n              const hasAnchor = anchor >= pos && anchor <= (pos + node.nodeSize)\n              const isEmpty = !node.isLeaf && !node.childCount\n\n              if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n                const classes = [this.options.emptyNodeClass]\n\n                if (this.editor.isEmpty) {\n                  classes.push(this.options.emptyEditorClass)\n                }\n\n                const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                  class: classes.join(' '),\n                  'data-placeholder': typeof this.options.placeholder === 'function'\n                    ? this.options.placeholder({\n                      editor: this.editor,\n                      node,\n                      pos,\n                      hasAnchor,\n                    })\n                    : this.options.placeholder,\n                })\n\n                decorations.push(decoration)\n              }\n\n              return this.options.includeChildren\n            })\n\n            return DecorationSet.create(doc, decorations)\n          },\n        },\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}