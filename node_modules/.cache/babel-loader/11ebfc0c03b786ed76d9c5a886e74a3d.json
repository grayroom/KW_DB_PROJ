{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nconst HardBreak = Node.create({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {}\n    };\n  },\n\n  inline: true,\n  group: 'inline',\n  selectable: false,\n\n  parseHTML() {\n    return [{\n      tag: 'br'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n\n  renderText() {\n    return '\\n';\n  },\n\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor\n      }) => {\n        return commands.first([() => commands.exitCode(), () => commands.command(() => {\n          const {\n            selection,\n            storedMarks\n          } = state;\n\n          if (selection.$from.parent.type.spec.isolating) {\n            return false;\n          }\n\n          const {\n            keepMarks\n          } = this.options;\n          const {\n            splittableMarks\n          } = editor.extensionManager;\n          const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n          return chain().insertContent({\n            type: this.name\n          }).command(({\n            tr,\n            dispatch\n          }) => {\n            if (dispatch && marks && keepMarks) {\n              const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n              tr.ensureMarks(filteredMarks);\n            }\n\n            return true;\n          }).run();\n        })]);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak()\n    };\n  }\n\n});\nexport { HardBreak, HardBreak as default };","map":{"version":3,"mappings":";AAkBa,eAAS,GAAGA,IAAI,CAACC,MAAL,CAA8B;EACrDC,IAAI,EAAE,WAD+C;;EAGrDC,UAAU;IACR,OAAO;MACLC,SAAS,EAAE,IADN;MAELC,cAAc,EAAE;IAFX,CAAP;EAID,CARoD;;EAUrDC,MAAM,EAAE,IAV6C;EAYrDC,KAAK,EAAE,QAZ8C;EAcrDC,UAAU,EAAE,KAdyC;;EAgBrDC,SAAS;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAP,CADK,CAAP;EAGD,CApBoD;;EAsBrDC,UAAU,CAAC;IAAEN;EAAF,CAAD,EAAmB;IAC3B,OAAO,CAAC,IAAD,EAAOO,eAAe,CAAC,KAAKC,OAAL,CAAaR,cAAd,EAA8BA,cAA9B,CAAtB,CAAP;EACD,CAxBoD;;EA0BrDS,UAAU;IACR,OAAO,IAAP;EACD,CA5BoD;;EA8BrDC,WAAW;IACT,OAAO;MACLC,YAAY,EAAE,MAAM,CAAC;QACnBC,QADmB;QAEnBC,KAFmB;QAGnBC,KAHmB;QAInBC;MAJmB,CAAD,KAKf;QACH,OAAOH,QAAQ,CAACI,KAAT,CAAe,CACpB,MAAMJ,QAAQ,CAACK,QAAT,EADc,EAEpB,MAAML,QAAQ,CAACM,OAAT,CAAiB,MAAK;UAC1B,MAAM;YAAEC,SAAF;YAAaC;UAAb,IAA6BN,KAAnC;;UAEA,IAAIK,SAAS,CAACE,KAAV,CAAgBC,MAAhB,CAAuBC,IAAvB,CAA4BC,IAA5B,CAAiCC,SAArC,EAAgD;YAC9C,OAAO,KAAP;UACD;;UAED,MAAM;YAAE1B;UAAF,IAAgB,KAAKS,OAA3B;UACA,MAAM;YAAEkB;UAAF,IAAsBX,MAAM,CAACY,gBAAnC;UACA,MAAMC,KAAK,GAAGR,WAAW,IACnBD,SAAS,CAACU,GAAV,CAAcC,YAAd,IAA8BX,SAAS,CAACE,KAAV,CAAgBO,KAAhB,EADpC;UAGA,OAAOf,KAAK,GACTkB,aADI,CACU;YAAER,IAAI,EAAE,KAAK1B;UAAb,CADV,EAEJqB,OAFI,CAEI,CAAC;YAAEc,EAAF;YAAMC;UAAN,CAAD,KAAqB;YAC5B,IAAIA,QAAQ,IAAIL,KAAZ,IAAqB7B,SAAzB,EAAoC;cAClC,MAAMmC,aAAa,GAAGN,KAAK,CACxBO,MADmB,CACZC,IAAI,IAAIV,eAAe,CAACW,QAAhB,CAAyBD,IAAI,CAACb,IAAL,CAAU1B,IAAnC,CADI,CAAtB;cAGAmC,EAAE,CAACM,WAAH,CAAeJ,aAAf;YACD;;YAED,OAAO,IAAP;UACD,CAXI,EAYJK,GAZI,EAAP;QAaD,CAzBK,CAFc,CAAf,CAAP;MA6BD;IApCI,CAAP;EAsCD,CArEoD;;EAuErDC,oBAAoB;IAClB,OAAO;MACL,aAAa,MAAM,KAAKzB,MAAL,CAAYH,QAAZ,CAAqBD,YAArB,EADd;MAEL,eAAe,MAAM,KAAKI,MAAL,CAAYH,QAAZ,CAAqBD,YAArB;IAFhB,CAAP;EAID;;AA5EoD,CAA9B,CAAZ","names":["Node","create","name","addOptions","keepMarks","HTMLAttributes","inline","group","selectable","parseHTML","tag","renderHTML","mergeAttributes","options","renderText","addCommands","setHardBreak","commands","chain","state","editor","first","exitCode","command","selection","storedMarks","$from","parent","type","spec","isolating","splittableMarks","extensionManager","marks","$to","parentOffset","insertContent","tr","dispatch","filteredMarks","filter","mark","includes","ensureMarks","run","addKeyboardShortcuts"],"sources":["../src/hard-break.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface HardBreakOptions {\n  keepMarks: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hardBreak: {\n      /**\n       * Add a hard break\n       */\n      setHardBreak: () => ReturnType,\n    }\n  }\n}\n\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  parseHTML() {\n    return [\n      { tag: 'br' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  renderText() {\n    return '\\n'\n  },\n\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor,\n      }) => {\n        return commands.first([\n          () => commands.exitCode(),\n          () => commands.command(() => {\n            const { selection, storedMarks } = state\n\n            if (selection.$from.parent.type.spec.isolating) {\n              return false\n            }\n\n            const { keepMarks } = this.options\n            const { splittableMarks } = editor.extensionManager\n            const marks = storedMarks\n              || (selection.$to.parentOffset && selection.$from.marks())\n\n            return chain()\n              .insertContent({ type: this.name })\n              .command(({ tr, dispatch }) => {\n                if (dispatch && marks && keepMarks) {\n                  const filteredMarks = marks\n                    .filter(mark => splittableMarks.includes(mark.type.name))\n\n                  tr.ensureMarks(filteredMarks)\n                }\n\n                return true\n              })\n              .run()\n          }),\n        ])\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}