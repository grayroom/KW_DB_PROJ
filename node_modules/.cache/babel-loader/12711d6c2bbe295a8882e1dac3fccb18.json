{"ast":null,"code":"import { posToDOMRect, Extension } from '@tiptap/core';\nimport { Plugin, PluginKey } from 'prosemirror-state';\nimport tippy from 'tippy.js';\n\nclass FloatingMenuView {\n  constructor({\n    editor,\n    element,\n    view,\n    tippyOptions = {},\n    shouldShow\n  }) {\n    this.preventHide = false;\n\n    this.shouldShow = ({\n      view,\n      state\n    }) => {\n      const {\n        selection\n      } = state;\n      const {\n        $anchor,\n        empty\n      } = selection;\n      const isRootDepth = $anchor.depth === 1;\n      const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;\n\n      if (!view.hasFocus() || !empty || !isRootDepth || !isEmptyTextBlock) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.mousedownHandler = () => {\n      this.preventHide = true;\n    };\n\n    this.focusHandler = () => {\n      // we use `setTimeout` to make sure `selection` is already updated\n      setTimeout(() => this.update(this.editor.view));\n    };\n\n    this.blurHandler = ({\n      event\n    }) => {\n      var _a;\n\n      if (this.preventHide) {\n        this.preventHide = false;\n        return;\n      }\n\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n        return;\n      }\n\n      this.hide();\n    };\n\n    this.editor = editor;\n    this.element = element;\n    this.view = view;\n\n    if (shouldShow) {\n      this.shouldShow = shouldShow;\n    }\n\n    this.element.addEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.on('focus', this.focusHandler);\n    this.editor.on('blur', this.blurHandler);\n    this.tippyOptions = tippyOptions; // Detaches menu content from its current parent\n\n    this.element.remove();\n    this.element.style.visibility = 'visible';\n  }\n\n  createTooltip() {\n    const {\n      element: editorElement\n    } = this.editor.options;\n    const editorIsAttached = !!editorElement.parentElement;\n\n    if (this.tippy || !editorIsAttached) {\n      return;\n    }\n\n    this.tippy = tippy(editorElement, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'right',\n      hideOnClick: 'toggle',\n      ...this.tippyOptions\n    }); // maybe we have to hide tippy on its own blur event as well\n\n    if (this.tippy.popper.firstChild) {\n      this.tippy.popper.firstChild.addEventListener('blur', event => {\n        this.blurHandler({\n          event\n        });\n      });\n    }\n  }\n\n  update(view, oldState) {\n    var _a, _b, _c;\n\n    const {\n      state\n    } = view;\n    const {\n      doc,\n      selection\n    } = state;\n    const {\n      from,\n      to\n    } = selection;\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n    if (isSame) {\n      return;\n    }\n\n    this.createTooltip();\n    const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n      editor: this.editor,\n      view,\n      state,\n      oldState\n    });\n\n    if (!shouldShow) {\n      this.hide();\n      return;\n    }\n\n    (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n      getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => posToDOMRect(view, from, to))\n    });\n    this.show();\n  }\n\n  show() {\n    var _a;\n\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n  }\n\n  hide() {\n    var _a;\n\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n  }\n\n  destroy() {\n    var _a;\n\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.destroy();\n    this.element.removeEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.off('focus', this.focusHandler);\n    this.editor.off('blur', this.blurHandler);\n  }\n\n}\n\nconst FloatingMenuPlugin = options => {\n  return new Plugin({\n    key: typeof options.pluginKey === 'string' ? new PluginKey(options.pluginKey) : options.pluginKey,\n    view: view => new FloatingMenuView({\n      view,\n      ...options\n    })\n  });\n};\n\nconst FloatingMenu = Extension.create({\n  name: 'floatingMenu',\n\n  addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'floatingMenu',\n      shouldShow: null\n    };\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return [];\n    }\n\n    return [FloatingMenuPlugin({\n      pluginKey: this.options.pluginKey,\n      editor: this.editor,\n      element: this.options.element,\n      tippyOptions: this.options.tippyOptions,\n      shouldShow: this.options.shouldShow\n    })];\n  }\n\n});\nexport { FloatingMenu, FloatingMenuPlugin, FloatingMenuView, FloatingMenu as default };","map":{"version":3,"mappings":"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","names":["FloatingMenuView","constructor","editor","element","view","tippyOptions","shouldShow","preventHide","state","selection","$anchor","empty","isRootDepth","depth","isEmptyTextBlock","parent","isTextblock","type","spec","code","textContent","hasFocus","mousedownHandler","focusHandler","setTimeout","update","event","relatedTarget","parentNode","_a","contains","hide","addEventListener","capture","on","blurHandler","remove","style","visibility","createTooltip","editorElement","options","editorIsAttached","parentElement","tippy","duration","getReferenceClientRect","content","interactive","trigger","placement","hideOnClick","popper","firstChild","oldState","doc","from","to","isSame","eq","_b","setProps","_c","posToDOMRect","show","destroy","removeEventListener","off","Plugin","key","pluginKey","PluginKey","Extension","create","name","addOptions","addProseMirrorPlugins","FloatingMenuPlugin"],"sources":["../src/floating-menu-plugin.ts","../src/floating-menu.ts"],"sourcesContent":["import { Editor, posToDOMRect } from '@tiptap/core'\nimport { EditorState, Plugin, PluginKey } from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport tippy, { Instance, Props } from 'tippy.js'\n\nexport interface FloatingMenuPluginProps {\n  pluginKey: PluginKey | string,\n  editor: Editor,\n  element: HTMLElement,\n  tippyOptions?: Partial<Props>,\n  shouldShow?: ((props: {\n    editor: Editor,\n    view: EditorView,\n    state: EditorState,\n    oldState?: EditorState,\n  }) => boolean) | null,\n}\n\nexport type FloatingMenuViewProps = FloatingMenuPluginProps & {\n  view: EditorView,\n}\n\nexport class FloatingMenuView {\n  public editor: Editor\n\n  public element: HTMLElement\n\n  public view: EditorView\n\n  public preventHide = false\n\n  public tippy: Instance | undefined\n\n  public tippyOptions?: Partial<Props>\n\n  public shouldShow: Exclude<FloatingMenuPluginProps['shouldShow'], null> = ({ view, state }) => {\n    const { selection } = state\n    const { $anchor, empty } = selection\n    const isRootDepth = $anchor.depth === 1\n    const isEmptyTextBlock = $anchor.parent.isTextblock\n      && !$anchor.parent.type.spec.code\n      && !$anchor.parent.textContent\n\n    if (\n      !view.hasFocus()\n      || !empty\n      || !isRootDepth\n      || !isEmptyTextBlock\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  constructor({\n    editor,\n    element,\n    view,\n    tippyOptions = {},\n    shouldShow,\n  }: FloatingMenuViewProps) {\n    this.editor = editor\n    this.element = element\n    this.view = view\n\n    if (shouldShow) {\n      this.shouldShow = shouldShow\n    }\n\n    this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true })\n    this.editor.on('focus', this.focusHandler)\n    this.editor.on('blur', this.blurHandler)\n    this.tippyOptions = tippyOptions\n    // Detaches menu content from its current parent\n    this.element.remove()\n    this.element.style.visibility = 'visible'\n  }\n\n  mousedownHandler = () => {\n    this.preventHide = true\n  }\n\n  focusHandler = () => {\n    // we use `setTimeout` to make sure `selection` is already updated\n    setTimeout(() => this.update(this.editor.view))\n  }\n\n  blurHandler = ({ event }: { event: FocusEvent }) => {\n    if (this.preventHide) {\n      this.preventHide = false\n\n      return\n    }\n\n    if (\n      event?.relatedTarget\n      && this.element.parentNode?.contains(event.relatedTarget as Node)\n    ) {\n      return\n    }\n\n    this.hide()\n  }\n\n  createTooltip() {\n    const { element: editorElement } = this.editor.options\n    const editorIsAttached = !!editorElement.parentElement\n\n    if (this.tippy || !editorIsAttached) {\n      return\n    }\n\n    this.tippy = tippy(editorElement, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'right',\n      hideOnClick: 'toggle',\n      ...this.tippyOptions,\n    })\n\n    // maybe we have to hide tippy on its own blur event as well\n    if (this.tippy.popper.firstChild) {\n      (this.tippy.popper.firstChild as HTMLElement).addEventListener('blur', event => {\n        this.blurHandler({ event })\n      })\n    }\n  }\n\n  update(view: EditorView, oldState?: EditorState) {\n    const { state } = view\n    const { doc, selection } = state\n    const { from, to } = selection\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection)\n\n    if (isSame) {\n      return\n    }\n\n    this.createTooltip()\n\n    const shouldShow = this.shouldShow?.({\n      editor: this.editor,\n      view,\n      state,\n      oldState,\n    })\n\n    if (!shouldShow) {\n      this.hide()\n\n      return\n    }\n\n    this.tippy?.setProps({\n      getReferenceClientRect: this.tippyOptions?.getReferenceClientRect || (() => posToDOMRect(view, from, to)),\n    })\n\n    this.show()\n  }\n\n  show() {\n    this.tippy?.show()\n  }\n\n  hide() {\n    this.tippy?.hide()\n  }\n\n  destroy() {\n    this.tippy?.destroy()\n    this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true })\n    this.editor.off('focus', this.focusHandler)\n    this.editor.off('blur', this.blurHandler)\n  }\n}\n\nexport const FloatingMenuPlugin = (options: FloatingMenuPluginProps) => {\n  return new Plugin({\n    key: typeof options.pluginKey === 'string'\n      ? new PluginKey(options.pluginKey)\n      : options.pluginKey,\n    view: view => new FloatingMenuView({ view, ...options }),\n  })\n}\n","import { Extension } from '@tiptap/core'\n\nimport { FloatingMenuPlugin, FloatingMenuPluginProps } from './floating-menu-plugin'\n\nexport type FloatingMenuOptions = Omit<FloatingMenuPluginProps, 'editor' | 'element'> & {\n  element: HTMLElement | null,\n}\n\nexport const FloatingMenu = Extension.create<FloatingMenuOptions>({\n  name: 'floatingMenu',\n\n  addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'floatingMenu',\n      shouldShow: null,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return []\n    }\n\n    return [\n      FloatingMenuPlugin({\n        pluginKey: this.options.pluginKey,\n        editor: this.editor,\n        element: this.options.element,\n        tippyOptions: this.options.tippyOptions,\n        shouldShow: this.options.shouldShow,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}