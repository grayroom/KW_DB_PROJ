{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nconst Paragraph = Node.create({\n  name: 'paragraph',\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  group: 'block',\n  content: 'inline*',\n\n  parseHTML() {\n    return [{\n      tag: 'p'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setParagraph: () => ({\n        commands\n      }) => {\n        return commands.setNode(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph()\n    };\n  }\n\n});\nexport { Paragraph, Paragraph as default };","map":{"version":3,"mappings":";AAiBa,eAAS,GAAGA,IAAI,CAACC,MAAL,CAA8B;EACrDC,IAAI,EAAE,WAD+C;EAGrDC,QAAQ,EAAE,IAH2C;;EAKrDC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;IADX,CAAP;EAGD,CAToD;;EAWrDC,KAAK,EAAE,OAX8C;EAarDC,OAAO,EAAE,SAb4C;;EAerDC,SAAS;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAP,CADK,CAAP;EAGD,CAnBoD;;EAqBrDC,UAAU,CAAC;IAAEL;EAAF,CAAD,EAAmB;IAC3B,OAAO,CAAC,GAAD,EAAMM,eAAe,CAAC,KAAKC,OAAL,CAAaP,cAAd,EAA8BA,cAA9B,CAArB,EAAoE,CAApE,CAAP;EACD,CAvBoD;;EAyBrDQ,WAAW;IACT,OAAO;MACLC,YAAY,EAAE,MAAM,CAAC;QAAEC;MAAF,CAAD,KAAiB;QACnC,OAAOA,QAAQ,CAACC,OAAT,CAAiB,KAAKd,IAAtB,CAAP;MACD;IAHI,CAAP;EAKD,CA/BoD;;EAiCrDe,oBAAoB;IAClB,OAAO;MACL,aAAa,MAAM,KAAKC,MAAL,CAAYH,QAAZ,CAAqBD,YAArB;IADd,CAAP;EAGD;;AArCoD,CAA9B,CAAZ","names":["Node","create","name","priority","addOptions","HTMLAttributes","group","content","parseHTML","tag","renderHTML","mergeAttributes","options","addCommands","setParagraph","commands","setNode","addKeyboardShortcuts","editor"],"sources":["../src/paragraph.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       */\n      setParagraph: () => ReturnType,\n    }\n  }\n}\n\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [\n      { tag: 'p' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph: () => ({ commands }) => {\n        return commands.setNode(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}